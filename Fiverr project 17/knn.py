# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aENaTGW6FpOV6KkzEFjIqcIMqeG4tGPg

#(1) Select columns: Goal, students_reached, and funding_status and create a new data-frame. (1 point)
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel("Crowdfunding_data_1000_projects (5).xlsx")

df.head()

df1 = df.loc[:,["Goal","students_reached","funding_status"]]

df1.head()

a = {"completed":1,"NotCompleted":0}
df1.funding_status=df1.funding_status.map(a)
df1.head()

"""#(2) Create random train and test data-frames in 75:25 ratio. (1 point)"""

x = df1.iloc[:,[0,1]]
y = df1.iloc[:,[-1]]

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25)

"""#(3) Using K-means, cluster the train data-frame into two clusters. Use Goal and students_reached columns (only independent variables) for clustering (4 points)"""

from sklearn.cluster import KMeans

km=KMeans(n_clusters=2)

km.fit(xtrain)

"""#(4) Plot the scatter plots before and after clustering. (2 points)


"""

ykm = km.predict(xtrain)

plt.scatter(xtrain.iloc[:,0],xtrain.iloc[:,1],c="g")
plt.title("Before Clustering")
plt.xlabel("Goal")
plt.ylabel("Students_reached")

plt.scatter(xtrain.iloc[:,0],xtrain.iloc[:,1],c=ykm)
plt.title("After Clustering")
plt.xlabel("Goal")
plt.ylabel("Students_reached")

"""#(5) Use predict() function and predict cluster labels for test data-frame. (2 points)"""

y_pred = km.predict(xtest)

y_pred#cluster labels for test dataframe

