{"cells":[{"cell_type":"markdown","metadata":{"id":"UnhrcLsFjucY"},"source":["### Time Series Data\n","\n","The `daily_energy.csv`includes daily power consumption, wind power generation and solar power generation of Germany between January 1st 2015 to December 31st 2017. The first row has the column names (Date, Consumption, Wind, Solar) the following rows have their values. There are no missing values.\n","\n","Fill the functions given below. Coding requirements are written as comments!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JuW3pYv0juc0"},"outputs":[],"source":["# Imports. Do not add any external libraries other than NumPy and Matplotlib\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AwYfA48KjudA"},"outputs":[],"source":["def read_data(fname):\n","    '''\n","    Load the data given in the file in a desired format.\n","    \n","    Inputs: Path for the csv file (fname). \n","    Outputs: Dictionary of numpy arrays. See below for details\n","    \n","    The first row includes the column names. The rest contain the corresponding values.\n","    \n","    The first column is always the date in the format: \n","    YYYY-MM-DD (e.g. May 4, 2016 is given as 2016-05-04)\n","    \n","    You need to store the date in a numpy array as a string and put it in the dictionary\n","    with the 'Date' key.\n","    \n","    You also need to parse this into Year, Month and Day. Your return dictionary should\n","    have these as keys, with the numpy arrays that will contain the parsed numbers \n","    as values. Note that these numpy arrays must be integers.\n","    \n","    The other columns are general. You can assume they are all floats. \n","    The dictionary keys come from the first row. Their values are numpy arrays.\n","    \n","    For example:\n","    - Let the first row be:\n","    Date,Consumption,Wind,Solar\n","    - Let the i'th row be:\n","    2016-05-04,1430.1360,84.9610,174.1850\n","    Then:\n","    dict['Date'][i] = '2016-05-04'\n","    dict['Year'][i] = 2016\n","    dict['Month'][i] = 5\n","    dict['Day'][i] = 4\n","    dict['Consumption'][i] = 1430.1360\n","    dict['Wind'][i] = 84.9610\n","    dict['Solar'][i] = 174.1850\n","    \n","    You do not have to build the numpy array row by row. You can do \n","    other sutff too. This example is provided to clarify the values at the i'th row.\n","    \n","    Note that the dictionary values should be numpy arrays!\n","    \n","    WARNING: Other than the date column, other columns might be different during grading! You need \n","    to write general code\n","    '''\n","    data = {}\n","    \n","    # Fill in the data as decribed above\n","    \n","    # Do not edit below this line\n","    return data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ByGu7vAbjudN"},"outputs":[],"source":["# Read data:\n","energy_data = read_data('daily_energy.csv')\n","\n","# Simple tests:\n","desired_keys = ['Date', 'Year', 'Month', 'Day', 'Consumption', 'Wind', 'Solar']\n","desired_num_cols = 1096\n","averages = {'Consumption':1383.146247, 'Wind':234.620880, 'Solar':96.124640}\n","\n","for key in desired_keys:\n","    if key not in energy_data.keys():\n","        print(f'Missing key {key} in the dictionary')\n","\n","for key in energy_data.keys():\n","    if not isinstance(energy_data[key],np.ndarray):\n","        print(f'The value corresponding to the key, {key}, in the dictionary is not a numpy array')\n","    elif energy_data[key].shape[0] != desired_num_cols:\n","        print(f'The numpy array corresponding to {key} does not have the correct number of elements {desired_num_cols} vs {averages[key].shape[0]}')\n","        \n","for key, item in averages.items():\n","    tmp = energy_data[key].mean()\n","    if abs(tmp-averages[key]) > 1e-6:\n","        print(f'The correct average ({averages[key]:.2f}) and the average of the dictionary ({tmp:.2f}) do not match.')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pYL-W6fzjudV"},"outputs":[],"source":["def plot_data(data, keys = None, date_range = None, ylabel = 'GWh', title = 'Germany Electricity'):\n","    '''\n","    Plot the desired values given the keys.\n","    \n","    Input: \n","        - data: dictionary of data, at least containing the key 'Date'\n","        - keys: The list of keys whose values will be plotted. If None, all \n","          the keys of the dictionary should be plotted\n","        - date_range: Tuple of the first and last dates to plot. If None, \n","        use the date range given in the data. You can assume that the date is always increasing.\n","        An example: ('2015-01-01', '2017-12-31')\n","        - ylabel: The desired ylabel of the figure\n","        - title: The desired title of the figure\n","    Output: The handle of the plotted figure (done for you, do not change it!)\n","    \n","    Plotting requirements:\n","        - This should be a line plot (plt.plot(...)). The x's are the days, the y's are the values in\n","        the numpy arrays given by the keys. The style of the lines should be left as defaults\n","        - x-axis: The data within the given range. The plot will be for each day (entry) within the range.\n","        The ticks and their labels will be different (see below)\n","        You can assume the limits are already within the data (e.g. no 2014 or 2018 for the given example file)\n","        - y-axis: the numpy values corresponding to keys\n","        - The y-ticks should be left as default.\n","        - The x-ticks should be on the first day of March, June, September and December with the label \n","        \"MarYY\", \"JunYY\", \"SepYY\" and \"AugYY\" respectively where YY is the last two digits of the year.\n","        For example Jun16, Aug17 ...\n","        - The tick labelsize should be 12 for both axes.\n","        - xlabel: Should be 'Date'. Should have a fontsize of 18\n","        - ylabel and title: Given as an input. Both should have a fontsize of 18\n","        - Legend: The legend should have the keys corresponding to the lines. It should have a fontsize of 18\n","        - Extra Text: Write the mean and standard deviation of the keys within the\n","        given time range somewhere on the figure. If there are multiple keys, write this for all of them. \n","        Play around with the placement to make sure the rest of the plot is visible!\n","        \n","        Hint: To set the fontsizes, look at the HistogramApplication.ipynb. For the legend, it is set\n","        the same way as the labels\n","    '''\n","    \n","    plt.figure(figsize=(12,8))\n","    \n","    # Your code goes below this line\n","    \n","    \n","    # Do not edit below this line\n","    return plt.gcf()"]},{"cell_type":"markdown","metadata":{"id":"nK_IyqbDjude"},"source":["Example pictures are given with the homework (attaching them here makes the notebook impractically large and we do not want you to submit the notebook with images)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MQnBTXHOjudi"},"outputs":[],"source":["all_data_plot = plot_data(energy_data)\n","all_data_plot.savefig('alldata.png',dpi=300)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"48wCTVHujudo"},"outputs":[],"source":["subset_plot = plot_data(energy_data,['Wind','Solar'])\n","subset_plot.savefig('subset.png',dpi=300)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qW0l9VFmjudu"},"outputs":[],"source":["shorter_date_plot = plot_data(energy_data,date_range=('2015-07-01','2017-01-31'))\n","shorter_date_plot.savefig('shorter.png',dpi=300)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"30CtIoPijudz"},"outputs":[],"source":["shorter_date_subset_plot = plot_data(energy_data,['Consumption','Wind'],date_range=('2016-01-01','2017-06-30'))\n","shorter_date_subset_plot.savefig('shortersubset.png',dpi=300)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RyDCrODfjud2"},"outputs":[],"source":["def fit_line(data, key1, key2):\n","    '''\n","    Fit a line between the values given by key1 and key2. Return the coefficients and the R2 score.\n","    \n","    Input: \n","        - data: dictionary of data\n","        - key1: The key of the first column (x)\n","        - key2: The key of the second column (y)\n","    Output:\n","        - coef: A list of values that correspond to the linear fit between x and y.\n","        i.e. y = coef[0]*x+coef[1]\n","        - r2: The R2 value. Note that you can calculate this using the residuals which can \n","        be obtained using the lstsq function of the numpy linear algebra module\n","    '''\n","    \n","    coef = [0,0]\n","    r2 = 0\n","    \n","    # Fill in the coef and the r2 variables with their correct values\n","    # Your code goes below this line\n","    \n","    # Do not edit below this line\n","    return coef, r2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0yr0IRQwjud7"},"outputs":[],"source":["print('''\n","Expected Output (close to):\n","[ -0.14 128.93] [0.15]\n","[-1.41e-01  2.92e+02] [0.14]\n","[ 0.11 88.49] [0.0097]\n","''')\n","\n","coefWS,r2WS = fit_line(energy_data, 'Wind', 'Solar')\n","print(coefWS,r2WS)\n","coefCS,r2CS = fit_line(energy_data, 'Consumption', 'Solar')\n","print(coefCS,r2CS)\n","coefCW,r2CW = fit_line(energy_data, 'Consumption', 'Wind')\n","print(coefCW,r2CW)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bZY4pgdjjud_"},"outputs":[],"source":["def plot_xy_line(data, key1, key2, coef):\n","    '''\n","    Plot the key1 vs key2 and the line defined by the coef\n","    \n","    Input: \n","        - data: dictionary of data\n","        - key1: The key of the first column (x)\n","        - key2: The key of the second column (y)\n","        - coef: The coefficients of the linear function between the keys (coef[0]*x+coef[1])\n","        \n","    Output:  The handle of the plotted figure (done for you, do not change it!)\n","    \n","    Plotting requirements:\n","        - This should be a line plot (plt.plot(...)). The key1 vs key2 should only be diamond markers (hint: 'd').\n","        The line should have the default parameters\n","        - xlabel: Should be key1. Should have a fontsize of 18\n","        - ylabel: Should be key2. Should have a fontsize of 18\n","        - Legend: Should be f'{key1} vs {key2}' and 'Fit'    \n","    '''\n","    \n","    \n","    plt.figure(figsize=(12,8))\n","    # Your code goes below this line\n","    \n","    # Do not edit below this line\n","    return plt.gcf()   "]},{"cell_type":"markdown","metadata":{"id":"bWb2lRJHjueD"},"source":["Since these are close to trivial, we are not providing example plots. One hint, they do not look like good fits. R2 being close to 0 in each case already tells us this."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7y9p0c6djueI"},"outputs":[],"source":["ws_plot = plot_xy_line(energy_data,'Wind','Solar',coefWS)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t3d0ZMgdjueK"},"outputs":[],"source":["cs_plot = plot_xy_line(energy_data,'Consumption','Solar',coefCS)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KINQoAsDjueN"},"outputs":[],"source":["cw_plot = plot_xy_line(energy_data,'Consumption','Wind',coefCW)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0lazVUgljuea"},"outputs":[],"source":["def plot_hist(data, key, bin_width = None, date_range = None):\n","    '''\n","    Plot the histogram  of the values corresponding to the given key, in the given date_range.\n","    \n","    Input: \n","        - data: dictionary of data\n","        - key: The key of the values we want to plot\n","        - bin_width: The approximate width of each bin. When you are calculating the bin number, round\n","        the number up. If None, use 10 bins by default. \n","        - date_range: Tuple of the first and last dates to plot. If None, \n","        use the date range given in the data. You can assume that the date is always increasing.\n","    Output: \n","        - The handle of the plotted figure (done for you, do not change it!)\n","        - The number of items in each bin (set the counts variable)\n","        - The bin edges (set the edges variable)\n","        Hint: The last two are the outputs of the hist function\n","    '''\n","    counts = 0\n","    bins = 0\n","    plt.figure(figsize=(12,8))\n","    # Your code below this line\n","    \n","    # Do not edit below this line\n","    return plt.gcf(), counts, bins"]},{"cell_type":"markdown","metadata":{"id":"rBabBZkejuee"},"source":["This should also be easy to handle. Just pay attention to how to set the bins."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FR-a8mJJjueg"},"outputs":[],"source":["wh, whc, whe = plot_hist(energy_data,'Wind')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S0n_sJa7juek"},"outputs":[],"source":["sh, shc, she = plot_hist(energy_data,'Solar')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LQSM2KGBjuem"},"outputs":[],"source":["ssh, sshc, sshe = plot_hist(energy_data,'Solar',25,('2017-06-01','2017-08-30'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jIuZv564jueo"},"outputs":[],"source":["if(len(sshc)!=8):\n","    print('Check how you calculate the number of bins given bin width!')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CAUdU7Oujueq"},"outputs":[],"source":["def energy_generation_pie(data, date_range = None):\n","    '''\n","    This function is specific to the given file.\n","    \n","    You should plot the pie chart of energy generation through wind, solar and other means.\n","    The other means can be calculated as Consumption - (Wind + Solar). This should be based on the\n","    averages in the given date range.\n","    \n","    Each slice/wedge should include the key name!\n","    \n","    Input: \n","        - data: dictionary of data\n","        - date_range: Tuple of the first and last dates to plot. If None, \n","        use the date range given in the data. You can assume that the date is always increasing.\n","    Output: \n","        - The handle of the plotted figure (done for you, do not change it!)\n","        - The averages of each key as a dictionary\n","    '''\n","    \n","    # Fill this correctly\n","    avg_dict = {'Other':-1,'Wind':-1,'Solar':-1}\n","    plt.figure(figsize=(12,8))\n","    # Your code below this line\n","    \n","    # Do not edit below this line\n","    return plt.gcf(), avg_dict      "]},{"cell_type":"markdown","metadata":{"id":"IdWfW468juet"},"source":["You are already given a way to check whether your averages are correct! (See the cell right after the part where you filled `read_data`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S9EEPHQyjuev"},"outputs":[],"source":["pc, avgs = energy_generation_pie(energy_data)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sqfkIr70juew"},"outputs":[],"source":["#We expect Solar contribution to increase\n","pcs, avgss = energy_generation_pie(energy_data,('2017-06-01','2017-08-30'))"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"name":"ipynb","provenance":[]}},"nbformat":4,"nbformat_minor":0}