{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Solving Quadratic Programming Models\n",
    "## 
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.sparse as sp\n",
    "import scipy.stats as sta\n",
    "\n",
    "import cplex as cp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quadratic programming\n",
    "Quadratic programming concerns the optimization of a quadratic objective function subject to linear constraints, i.e., the problem:\n",
    "\n",
    "\\begin{align*}\n",
    "\\mbox{minimize} \\;\\;& \\sum\\limits_{i=1}^{N} c_{i} x_{i} + \\dfrac{1}{2} \\sum\\limits_{i=1}^{N} \\sum\\limits_{j=1}^{N} q_{ij} x_{i} x_{j} \\\\\n",
    "\\mbox{subject to:} \\;\\;& \\sum\\limits_{i=1}^{N} a_{mi} x_{i} \\leqÂ b_{m} \\;\\;\\;\\; m = 1, 2, \\dots, M\\\\\n",
    "\\;\\;& l_{i} \\leq x_{i} \\leq u_{i} \\;\\;\\;\\; i = 1, 2, \\dots, N\n",
    "\\end{align*}\n",
    "\n",
    "The data $c_{i}$, $a_{mi}$, $b_{m}$, $l_{i}$, and $u_{i}$ are assumed to be known, as are the additional $q_{ij}$ data. We also assume the symmetry condition $q_{ij} = q_{ji}$. This condition is really no restriction, since $q_{ij}$ can be replaced by $(q_{ij} + q_{ji}) / 2$. The symmetry condition is then met, and a straightforward calculation shows that the old and new $q_{ij}$ coefficients give the same quadratic contribution to the objective function. \n",
    "\n",
    "\\begin{align*}\n",
    "\\mbox{minimize} \\;\\;& \\boldsymbol{c}^{\\top} \\boldsymbol{x} + \\dfrac{1}{2} \\boldsymbol{x}^{\\top} \\mathbf{Q} \\boldsymbol{x} \\\\\n",
    "\\mbox{subject to:} \\;\\;& \\mathbf{A} \\boldsymbol{x} \\leq \\boldsymbol{b} \\\\\n",
    "\\;\\;& \\boldsymbol{l} \\leq \\boldsymbol{x} \\leq \\boldsymbol{u}\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quadratic_programming(direction, A, senses, b, c, Q, l, u):\n",
    "    # create an empty optimization problem\n",
    "    prob = cp.Cplex()\n",
    "\n",
    "    # add decision variables to the problem including their linear coefficients in objective and ranges\n",
    "    prob.variables.add(obj = c.tolist(), lb = l.tolist(), ub = u.tolist())\n",
    "    \n",
    "    # add quadratic coefficients in objective\n",
    "    row_indices, col_indices = Q.nonzero()\n",
    "    prob.objective.set_quadratic_coefficients(zip(row_indices.tolist(), col_indices.tolist(), Q.data.tolist()))\n",
    "\n",
    "    # define problem type\n",
    "    if direction == \"maximize\":\n",
    "        prob.objective.set_sense(prob.objective.sense.maximize)\n",
    "    else:\n",
    "        prob.objective.set_sense(prob.objective.sense.minimize)\n",
    "\n",
    "    # add constraints to the problem including their directions and right-hand side values\n",
    "    prob.linear_constraints.add(senses = senses.tolist(), rhs = b.tolist())\n",
    "\n",
    "    # add coefficients for each constraint\n",
    "    row_indices, col_indices = A.nonzero()\n",
    "    prob.linear_constraints.set_coefficients(zip(row_indices.tolist(), col_indices.tolist(), A.data.tolist()))\n",
    "\n",
    "    # solve the problem\n",
    "    prob.solve()\n",
    "\n",
    "    # check the solution status\n",
    "    print(prob.solution.get_status())\n",
    "    print(prob.solution.status[prob.solution.get_status()])\n",
    "\n",
    "    # get the solution\n",
    "    x_star = prob.solution.get_values()\n",
    "    obj_star = prob.solution.get_objective_value()\n",
    "\n",
    "    return(x_star, obj_star)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Portfolio optimization\n",
    "Suppose that a portfolio contains $N$ different assets. The rate of return of asset $i$ is a random variable with expected value $m_i$. The problem is to find what fraction $x_i$ to invest in each asset $i$ in order to minimize risk, subject to a specified minimum expected rate of return.\n",
    "\n",
    "Let $C$ denote the covariance matrix of rates of asset returns.\n",
    "\n",
    "The classical mean-variance model consists of minimizing portfolio risk, as measured by\n",
    "\n",
    "$$\\frac{1}{2} \\boldsymbol{x}^{\\top} \\mathbf{C} \\boldsymbol{x}$$\n",
    "\n",
    "subject to a set of constraints.\n",
    "\n",
    "The expected return should be no less than a minimal rate of portfolio return $r$ that the investor desires,\n",
    "\n",
    "$$\\sum_{i=1}^{N} m_{i} {x}_i \\ge r,$$\n",
    "\n",
    "the sum of the investment fractions $x_i$'s should add up to a total of one,\n",
    "\n",
    "$$\\sum_{i=1}^{N} {x}_i = 1,$$\n",
    "\n",
    "and, being fractions (or percentages), they should be numbers between zero and one,\n",
    "\n",
    "$$0 \\le x_i \\le 1, \\;\\;\\; i = 1 \\ldots N.$$\n",
    "\n",
    "Since the objective to minimize portfolio risk is quadratic, and the constraints are linear, the resulting optimization problem is a quadratic program, or QP.\n",
    "\n",
    "### Creating a random problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 10\n",
    "\n",
    "min_mean = -0.1\n",
    "max_mean = 0.4\n",
    "mean_values = np.random.uniform(min_mean, max_mean, N)\n",
    "expected_return = 0.35\n",
    "\n",
    "min_deviation = 0.08\n",
    "max_deviation = 0.60\n",
    "deviation_values = np.random.uniform(min_deviation, max_deviation, N)\n",
    "\n",
    "eigs = np.random.uniform(0, 10, N)\n",
    "eigs = eigs / np.sum(eigs) * N\n",
    "correlation_matrix = sta.random_correlation.rvs(eigs)\n",
    "\n",
    "covariance_matrix = correlation_matrix * np.dot(deviation_values, np.transpose(deviation_values))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constructing the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de\n",
      "CPXPARAM_Read_DataCheck                          1\n",
      "Number of nonzeros in lower triangle of Q = 45\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for factor of Q:\n",
      "  Rows in Factor            = 10\n",
      "  Integer space required    = 10\n",
      "  Total non-zeros in factor = 55\n",
      "  Total FP ops to factor    = 385\n",
      "Tried aggregator 1 time.\n",
      "QP Presolve added 0 rows and 10 columns.\n",
      "Reduced QP has 12 rows, 20 columns, and 85 nonzeros.\n",
      "Reduced QP objective Q matrix has 10 nonzeros.\n",
      "Presolve time = 0.02 sec. (0.01 ticks)\n",
      "Parallel mode: using up to 2 threads for barrier.\n",
      "Number of nonzeros in lower triangle of A*A' = 66\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for Cholesky factor:\n",
      "  Threads                   = 2\n",
      "  Rows in Factor            = 12\n",
      "  Integer space required    = 12\n",
      "  Total non-zeros in factor = 78\n",
      "  Total FP ops to factor    = 650\n",
      " Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf          \n",
      "   0   6.0316848e-02  -1.0000060e+04  2.32e+02  1.90e+02  1.00e+03\n",
      "   1   2.5747415e-01  -8.4170953e+03  5.90e+00  4.83e+00  2.54e+01\n",
      "   2   1.1668313e-01  -1.6098501e+03  6.78e-01  5.54e-01  2.92e+00\n",
      "   3   1.5924025e-01  -3.3241402e+02  9.75e-02  7.97e-02  4.20e-01\n",
      "   4   1.7797847e-01  -6.0598125e+00  9.06e-05  7.40e-05  3.90e-04\n",
      "   5   1.7527440e-01  -1.2187541e-01  1.06e-14  2.22e-16  2.61e-14\n",
      "   6   1.4964296e-01   1.0617388e-01  1.28e-14  1.11e-16  2.51e-15\n",
      "   7   1.3637742e-01   1.3274143e-01  1.29e-14  3.33e-16  9.89e-16\n",
      "   8   1.3482632e-01   1.3458592e-01  2.94e-14  0.00e+00  1.37e-15\n",
      "   9   1.3471594e-01   1.3470375e-01  3.68e-14  1.11e-16  9.29e-16\n",
      "  10   1.3471210e-01   1.3471152e-01  4.06e-14  1.11e-16  7.83e-16\n",
      "  11   1.3471194e-01   1.3471191e-01  1.47e-14  6.66e-16  8.02e-16\n",
      "  12   1.3471193e-01   1.3471193e-01  2.56e-14  2.22e-16  6.80e-16\n",
      "Barrier time = 0.06 sec. (0.13 ticks)\n",
      "\n",
      "Total time on 2 threads = 0.07 sec. (0.13 ticks)\n",
      "1\n",
      "optimal\n",
      "[0.2140248559233324, 1.77877153507394e-10, 1.0857506975072396e-10, 0.21730032702876906, 0.29718132944682774, 0.1520719641778983, 1.1427436670591956e-10, 1.956904346344066e-10, 0.11942152118131978, 1.645450340078769e-09]\n",
      "0.1347119314932414\n"
     ]
    }
   ],
   "source": [
    "c = np.repeat(0, N)\n",
    "senses = np.array([\"G\", \"E\"])\n",
    "b = np.array([expected_return, 1])\n",
    "l = np.repeat(0, N)\n",
    "u = np.repeat(1, N)\n",
    "\n",
    "aij = np.concatenate((mean_values, np.repeat(1, N)))\n",
    "row = np.concatenate((np.repeat(0, N), np.repeat(1, N)))\n",
    "col = np.concatenate((range(N), range(N)))\n",
    "A = sp.csr_matrix((aij, (row, col)), shape = (2, N))\n",
    "\n",
    "Q = sp.csr_matrix(covariance_matrix)\n",
    "\n",
    "x_star, obj_star = quadratic_programming(\"minimize\", A, senses, b, c, Q, l, u)\n",
    "print(x_star)\n",
    "print(obj_star)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "plt.bar(x = np.arange(1, N + 1), height = x_star)\n",
    "plt.xlabel(\"Asset\")\n",
    "plt.ylabel(\"Proportion\")\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Euclidean distance between polyhedra\n",
    "Let $C$ and $D$ be two polyhedra described by the sets of linear inequalities $\\mathbf{A}_{1} \\boldsymbol{x} \\leq \\boldsymbol{b}_{1}$ and $\\mathbf{A}_{2} \\boldsymbol{x} \\leq \\boldsymbol{b}_{2}$, respectively. The distance between $C$ and $D$ is the distance between the closest pair of points, one in $C$ and the other in $D$, as illustrated in figure below.\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "The distance between them is the optimal value of the problem\n",
    "\n",
    "\\begin{align*}\n",
    "\\mbox{minimize} \\;\\;& \\|\\boldsymbol{x}_{1} - \\boldsymbol{x}_{2}\\|_{2} = \\sqrt{(x_{11} - x_{21})^{2} + (x_{12} - x_{22})^{2}} \\\\\n",
    "\\mbox{subject to:} \\;\\;& \\mathbf{A}_{1} \\boldsymbol{x}_{1} \\leq  \\boldsymbol{b}_{1}\\\\\n",
    "\\;\\;& \\mathbf{A}_{2} \\boldsymbol{x}_{2} \\leq  \\boldsymbol{b}_{2}.\n",
    "\\end{align*}\n",
    "\n",
    "We can square the objective to obtain an equivalent QP.\n",
    "\n",
    "\\begin{align*}\n",
    "\\mbox{minimize} \\;\\;& \\|\\boldsymbol{x}_{1} - \\boldsymbol{x}_{2}\\|_{2}^{2} = (x_{11} - x_{21})^{2} + (x_{12} - x_{22})^{2} = x_{11}^2 - 2 x_{11} x_{21} + x_{21}^{2} + x_{12}^2 - 2 x_{12} x_{22} + x_{22}^{2} \\\\\n",
    "\\mbox{subject to:} \\;\\;& \\mathbf{A}_{1} \\boldsymbol{x}_{1} \\leq  \\boldsymbol{b}_{1}\\\\\n",
    "\\;\\;& \\mathbf{A}_{2} \\boldsymbol{x}_{2} \\leq  \\boldsymbol{b}_{2}.\n",
    "\\end{align*}\n",
    "\n",
    "\\begin{align*}\n",
    "\\mbox{minimize} \\;\\;& \\begin{bmatrix}x_{11} & x_{12} & x_{21} & x_{22}\\end{bmatrix}\n",
    "\\begin{bmatrix} 1 & 0 & -1 & 0\\\\0 & 1 & 0 & -1\\\\-1 & 0 & 1 & 0\\\\0 & -1 & 0 & 1\\end{bmatrix}\n",
    "\\begin{bmatrix}x_{11} \\\\ x_{12} \\\\ x_{21} \\\\ x_{22}\\end{bmatrix}\\\\\n",
    "\\mbox{subject to:} \\;\\;& \\begin{bmatrix} \\mathbf{A}_{1} & \\mathbf{0} \\\\ \\mathbf{0} & \\mathbf{A}_{2} \\end{bmatrix} \\begin{bmatrix}x_{11} \\\\ x_{12} \\\\ x_{21} \\\\ x_{22}\\end{bmatrix} \\leq \\begin{bmatrix} \\boldsymbol{b}_{1} \\\\ \\boldsymbol{b}_{2}\\end{bmatrix}.\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8, 8))\n",
    "plt.axis(\"equal\")\n",
    "plt.fill([3, 10, 8, 5], [7, 7, 2, 3], color = \"#377eb8\")\n",
    "plt.plot([3, 10, 8, 5, 3], [7, 7, 2, 3, 7], color = \"black\")\n",
    "plt.fill([-5, 2, 0, -3], [-2, -2, 2, 3], color = \"#e41a1c\")\n",
    "plt.plot([-5, 2, 0, -3, -5], [-2, -2, 2, 3, -2], color = \"black\")\n",
    "plt.xlabel(\"$x_1$\")\n",
    "plt.ylabel(\"$x_2$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The blue polyhedron can be represented as\n",
    "\n",
    "\\begin{align*}\n",
    "\\underbrace{\\begin{bmatrix} 0 & 1\\\\5 & -2\\\\-1 & -3\\\\-2 & -1\\end{bmatrix}}_{\\mathbf{A}_{1}} \\underbrace{\\begin{bmatrix} x_{11}\\\\x_{12}\\end{bmatrix}}_{\\boldsymbol{x}_{1}} \\leq \\underbrace{\\begin{bmatrix} 7\\\\36\\\\-14\\\\-13\\end{bmatrix}}_{\\boldsymbol{b}_{1}}.\n",
    "\\end{align*}\n",
    "\n",
    "The red polyhedron can be represented as\n",
    "\n",
    "\\begin{align*}\n",
    "\\underbrace{\\begin{bmatrix} 0 & -1\\\\2 & 1\\\\1 & 3\\\\-5 & 2\\end{bmatrix}}_{\\mathbf{A}_{2}} \\underbrace{\\begin{bmatrix} x_{21}\\\\x_{22}\\end{bmatrix}}_{\\boldsymbol{x}_{2}} \\leq \\underbrace{\\begin{bmatrix} 2\\\\2\\\\6\\\\21\\end{bmatrix}}_{\\boldsymbol{b}_{2}}.\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "A1 = np.array([[0, 1],\n",
    "               [5, -2],\n",
    "               [-1, -3],\n",
    "               [-2, -1]])\n",
    "\n",
    "b1 = np.array([7, 36, -14, -13])\n",
    "\n",
    "A2 = np.array([[0, -1],\n",
    "               [2, 1],\n",
    "               [1, 3],\n",
    "               [-5, 2]])\n",
    "\n",
    "b2 = np.array([2, 2, 6, 21])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de\n",
      "CPXPARAM_Read_DataCheck                          1\n",
      "Number of nonzeros in lower triangle of Q = 2\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for factor of Q:\n",
      "  Rows in Factor            = 4\n",
      "  Integer space required    = 4\n",
      "  Total non-zeros in factor = 6\n",
      "  Total FP ops to factor    = 10\n",
      "Tried aggregator 1 time.\n",
      "QP Presolve eliminated 4 rows and 2 columns.\n",
      "QP Presolve added 0 rows and 4 columns.\n",
      "Reduced QP has 8 rows, 6 columns, and 18 nonzeros.\n",
      "Reduced QP objective Q matrix has 2 nonzeros.\n",
      "Presolve time = 0.01 sec. (0.01 ticks)\n",
      "Parallel mode: using up to 2 threads for barrier.\n",
      "Number of nonzeros in lower triangle of A*A' = 18\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for Cholesky factor:\n",
      "  Threads                   = 2\n",
      "  Rows in Factor            = 8\n",
      "  Integer space required    = 8\n",
      "  Total non-zeros in factor = 36\n",
      "  Total FP ops to factor    = 204\n",
      " Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf          \n",
      "   0   7.9391724e+01  -9.0793917e+03  6.82e+02  0.00e+00  8.01e+03\n",
      "   1   3.4522122e+02  -1.6865941e+04  7.93e+01  0.00e+00  9.32e+02\n",
      "   2   1.6258802e+02  -5.9196160e+03  4.32e-05  0.00e+00  1.91e-09\n",
      "   3   1.6250981e+02  -8.9122131e+01  4.28e-05  8.33e-17  5.90e-01\n",
      "   4   4.9279179e+01  -2.0903090e+02  8.25e-06  0.00e+00  2.21e-01\n",
      "   5   2.9912550e+01  -1.3234342e+01  1.15e-06  0.00e+00  6.05e-01\n",
      "   6   5.2626621e+01  -4.7905281e+01  3.71e-07  4.44e-16  4.92e-01\n",
      "   7   7.0105281e+01  -2.6448039e+01  9.88e-08  0.00e+00  1.43e-01\n",
      "   8   2.9692048e+01   5.8583204e+00  8.94e-13  0.00e+00  5.65e-02\n",
      "   9   2.4322976e+01   2.3303165e+01  1.13e-12  0.00e+00  5.81e-03\n",
      "  10   2.4232865e+01   2.4097285e+01  1.63e-12  0.00e+00  1.36e-04\n",
      "  11   2.4204250e+01   2.4187376e+01  2.62e-13  0.00e+00  1.94e-06\n",
      "  12   2.4200528e+01   2.4198419e+01  2.14e-13  0.00e+00  1.56e-07\n",
      "  13   2.4200066e+01   2.4199802e+01  1.81e-13  0.00e+00  1.59e-08\n",
      "  14   2.4200008e+01   2.4199975e+01  3.04e-13  0.00e+00  1.73e-09\n",
      "  15   2.4200001e+01   2.4199997e+01  6.85e-13  0.00e+00  1.90e-10\n",
      "  16   2.4200000e+01   2.4200000e+01  3.78e-13  0.00e+00  2.08e-11\n",
      "  17   2.4200000e+01   2.4200000e+01  3.15e-13  0.00e+00  2.29e-12\n",
      "Barrier time = 0.06 sec. (0.06 ticks)\n",
      "\n",
      "Total time on 2 threads = 0.06 sec. (0.06 ticks)\n",
      "1\n",
      "optimal\n",
      "[4.705935489176454, 3.5881290234746763, 0.3059354902892449, 1.3881290175939582]\n",
      "24.2000000160826\n"
     ]
    }
   ],
   "source": [
    "c = np.repeat(0, 4)\n",
    "senses = np.repeat(\"L\", A1.shape[0] + A2.shape[0])\n",
    "b = np.concatenate((b1, b2))\n",
    "l = np.repeat(-cp.infinity, 4)\n",
    "u = np.repeat(cp.infinity, 4)\n",
    "\n",
    "A = np.vstack((np.hstack((A1, np.zeros((A1.shape[0], 2)))),\n",
    "               np.hstack((np.zeros((A2.shape[0], 2)), A2))))\n",
    "A = sp.csr_matrix(A)\n",
    "\n",
    "Q = 2 * np.array([[1, 0, -1, 0],\n",
    "                  [0, 1, 0, -1],\n",
    "                  [-1, 0, 1, 0],\n",
    "                  [0, -1, 0, 1]])\n",
    "Q = sp.csr_matrix(Q)\n",
    "\n",
    "x_star, obj_star = quadratic_programming(\"minimize\", A, senses, b, c, Q, l, u)\n",
    "print(x_star)\n",
    "print(obj_star)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8, 8))\n",
    "plt.axis(\"equal\")\n",
    "plt.fill([3, 10, 8, 5], [7, 7, 2, 3], color = \"#377eb8\")\n",
    "plt.plot([3, 10, 8, 5, 3], [7, 7, 2, 3, 7], color = \"black\")\n",
    "plt.fill([-5, 2, 0, -3], [-2, -2, 2, 3], color = \"#e41a1c\")\n",
    "plt.plot([-5, 2, 0, -3, -5], [-2, -2, 2, 3, -2], color = \"black\")\n",
    "plt.plot(x_star[0], x_star[1], \"o\", color = \"orange\", markersize = 12)\n",
    "plt.plot(x_star[2], x_star[3], \"o\", color = \"orange\", markersize = 12)\n",
    "plt.plot([x_star[0], x_star[2]], [x_star[1], x_star[3]], color = \"orange\", linewidth = 3)\n",
    "plt.xlabel(\"$x_1$\")\n",
    "plt.ylabel(\"$x_2$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance_between_polyhedra(A1, b1, A2, b2):\n",
    "    N = A1.shape[1]\n",
    "    M1 = A1.shape[0]\n",
    "    M2 = A2.shape[0]\n",
    "    c = np.repeat(0, 2 * N)\n",
    "    senses = np.repeat(\"L\", M1 + M2)\n",
    "    b = np.concatenate((b1, b2))\n",
    "    l = np.repeat(-cp.infinity, 2 * N)\n",
    "    u = np.repeat(cp.infinity, 2 * N)\n",
    "\n",
    "    A = sp.block_diag((A1, A2), format = \"csr\")\n",
    "\n",
    "    Q = sp.diags((1, -1, -1), offsets = (0, N, -N), shape = (2 * N, 2 * N), format = \"csr\")\n",
    "\n",
    "    x_star, obj_star = quadratic_programming(\"minimize\", A, senses, b, c, Q, l, u)\n",
    "    return(x_star[:-N], x_star[N:], np.sqrt(obj_star))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de\n",
      "CPXPARAM_Read_DataCheck                          1\n",
      "Number of nonzeros in lower triangle of Q = 2\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.01 sec. (0.00 ticks)\n",
      "Summary statistics for factor of Q:\n",
      "  Rows in Factor            = 4\n",
      "  Integer space required    = 4\n",
      "  Total non-zeros in factor = 6\n",
      "  Total FP ops to factor    = 10\n",
      "Tried aggregator 1 time.\n",
      "QP Presolve eliminated 4 rows and 2 columns.\n",
      "QP Presolve added 0 rows and 4 columns.\n",
      "Reduced QP has 8 rows, 6 columns, and 18 nonzeros.\n",
      "Reduced QP objective Q matrix has 2 nonzeros.\n",
      "Presolve time = 0.02 sec. (0.01 ticks)\n",
      "Parallel mode: using up to 2 threads for barrier.\n",
      "Number of nonzeros in lower triangle of A*A' = 18\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for Cholesky factor:\n",
      "  Threads                   = 2\n",
      "  Rows in Factor            = 8\n",
      "  Integer space required    = 8\n",
      "  Total non-zeros in factor = 36\n",
      "  Total FP ops to factor    = 204\n",
      " Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf          \n",
      "   0   4.4536384e+01  -9.0445364e+03  6.56e+02  0.00e+00  8.01e+03\n",
      "   1   1.7556030e+02  -1.6757797e+04  7.75e+01  0.00e+00  9.46e+02\n",
      "   2   8.1868824e+01  -6.0836591e+03  1.03e-04  2.50e-16  3.03e-09\n",
      "   3   7.9900271e+01  -6.0122775e+01  1.78e-05  1.39e-16  4.42e-09\n",
      "   4   2.2010916e+01  -3.9047429e+01  1.59e-13  0.00e+00  2.06e-01\n",
      "   5   1.4469723e+01   7.8321176e+00  2.45e-13  0.00e+00  8.72e-01\n",
      "   6   1.2320683e+01   1.1240632e+01  3.48e-13  0.00e+00  3.71e-03\n",
      "   7   1.2134584e+01   1.1995145e+01  2.40e-13  0.00e+00  1.19e-04\n",
      "   8   1.2104382e+01   1.2087074e+01  3.55e-13  0.00e+00  1.20e-06\n",
      "   9   1.2100541e+01   1.2098380e+01  9.68e-14  0.00e+00  4.23e-08\n",
      "  10   1.2100068e+01   1.2099797e+01  1.75e-13  0.00e+00  6.08e-09\n",
      "  11   1.2100008e+01   1.2099975e+01  2.38e-13  0.00e+00  6.90e-10\n",
      "  12   1.2100001e+01   1.2099997e+01  3.39e-13  0.00e+00  7.58e-11\n",
      "  13   1.2100000e+01   1.2100000e+01  1.83e-13  0.00e+00  8.29e-12\n",
      "  14   1.2100000e+01   1.2100000e+01  1.22e-13  0.00e+00  9.08e-13\n",
      "Barrier time = 0.08 sec. (0.05 ticks)\n",
      "\n",
      "Total time on 2 threads = 0.08 sec. (0.05 ticks)\n",
      "1\n",
      "optimal\n",
      "[4.697768859371325, 3.604462285004351]\n",
      "[0.29776886165265853, 1.4044622729476806]\n",
      "3.4785054285550294\n"
     ]
    }
   ],
   "source": [
    "x1, x2, distance = distance_between_polyhedra(A1, b1, A2, b2)\n",
    "print(x1)\n",
    "print(x2)\n",
    "print(distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8, 8))\n",
    "plt.axis(\"equal\")\n",
    "plt.fill([3, 10, 8, 5], [7, 7, 2, 3], color = \"#377eb8\")\n",
    "plt.plot([3, 10, 8, 5, 3], [7, 7, 2, 3, 7], color = \"black\")\n",
    "plt.fill([-5, 2, 0, -3], [-2, -2, 2, 3], color = \"#e41a1c\")\n",
    "plt.plot([-5, 2, 0, -3, -5], [-2, -2, 2, 3, -2], color = \"black\")\n",
    "plt.plot(x1[0], x1[1], \"o\", color = \"orange\", markersize = 12)\n",
    "plt.plot(x2[0], x2[1], \"o\", color = \"orange\", markersize = 12)\n",
    "plt.plot([x1[0], x2[0]], [x1[1], x2[1]], color = \"orange\", linewidth = 3)\n",
    "plt.xlabel(\"$x_1$\")\n",
    "plt.ylabel(\"$x_2$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ -3.  11.  19.]\n",
      " [ -6.  12.  19.]\n",
      " [ 13. -16.  -5.]\n",
      " [ 16.  -4. -16.]\n",
      " [-12.   4.  15.]\n",
      " [  6.  -6.  10.]]\n",
      "[ 10.  -7. -17. -19.   8. -17.]\n",
      "[[ -9. -13.  -8.]\n",
      " [  3.  -3.  -9.]\n",
      " [  3.   0. -17.]\n",
      " [  1.  -7. -10.]\n",
      " [ -6. -16.  -8.]\n",
      " [-13. -20.  -4.]\n",
      " [  8.   3.   6.]]\n",
      "[-12.  -1.  -1.  13.   2.   2.   3.]\n"
     ]
    }
   ],
   "source": [
    "A1 = np.loadtxt(\"A1.txt\")\n",
    "b1 = np.loadtxt(\"b1.txt\")\n",
    "A2 = np.loadtxt(\"A2.txt\")\n",
    "b2 = np.loadtxt(\"b2.txt\")\n",
    "print(A1)\n",
    "print(b1)\n",
    "print(A2)\n",
    "print(b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de\n",
      "CPXPARAM_Read_DataCheck                          1\n",
      "Number of nonzeros in lower triangle of Q = 3\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.01 sec. (0.00 ticks)\n",
      "Summary statistics for factor of Q:\n",
      "  Rows in Factor            = 6\n",
      "  Integer space required    = 6\n",
      "  Total non-zeros in factor = 9\n",
      "  Total FP ops to factor    = 15\n",
      "Tried aggregator 1 time.\n",
      "QP Presolve eliminated 3 rows and 3 columns.\n",
      "QP Presolve added 0 rows and 6 columns.\n",
      "Reduced QP has 16 rows, 9 columns, and 47 nonzeros.\n",
      "Reduced QP objective Q matrix has 3 nonzeros.\n",
      "Presolve time = 0.02 sec. (0.01 ticks)\n",
      "Parallel mode: using up to 2 threads for barrier.\n",
      "Number of nonzeros in lower triangle of A*A' = 74\n",
      "Using Approximate Minimum Degree ordering\n",
      "Total time for automatic ordering = 0.00 sec. (0.00 ticks)\n",
      "Summary statistics for Cholesky factor:\n",
      "  Threads                   = 2\n",
      "  Rows in Factor            = 16\n",
      "  Integer space required    = 19\n",
      "  Total non-zeros in factor = 94\n",
      "  Total FP ops to factor    = 656\n",
      " Itn      Primal Obj        Dual Obj  Prim Inf Upper Inf  Dual Inf          \n",
      "   0   3.6618809e-01  -3.6618809e-01  1.45e+01  0.00e+00  1.30e+04\n",
      "   1   2.3788227e+00   3.3471859e+02  5.74e+00  0.00e+00  5.13e+03\n",
      "   2   6.4764171e+00   3.2894636e+02  1.49e+00  0.00e+00  1.33e+03\n",
      "   3   1.3062247e+01  -6.9266951e+00  1.03e-01  0.00e+00  9.25e+01\n",
      "   4   8.4599779e+00  -1.0925743e+00  1.21e-02  0.00e+00  1.08e+01\n",
      "   5   5.8449530e+00   3.6394371e+00  2.66e-03  0.00e+00  3.08e+00\n",
      "   6   3.7656256e+00   3.2238514e+00  2.50e-04  0.00e+00  4.46e-01\n",
      "   7   3.5138009e+00   3.4267979e+00  3.88e-13  0.00e+00  5.23e-04\n",
      "   8   3.4805573e+00   3.4738866e+00  4.80e-13  0.00e+00  1.31e-05\n",
      "   9   3.4781842e+00   3.4776715e+00  6.73e-13  0.00e+00  7.15e-08\n",
      "  10   3.4780023e+00   3.4779628e+00  1.06e-12  0.00e+00  4.25e-10\n",
      "  11   3.4779883e+00   3.4779852e+00  7.69e-13  0.00e+00  2.52e-12\n",
      "  12   3.4779872e+00   3.4779869e+00  1.07e-12  0.00e+00  1.49e-14\n",
      "  13   3.4779871e+00   3.4779871e+00  8.25e-13  0.00e+00  4.83e-15\n",
      "Barrier time = 0.09 sec. (0.09 ticks)\n",
      "\n",
      "Total time on 2 threads = 0.09 sec. (0.09 ticks)\n",
      "1\n",
      "optimal\n",
      "[-3.4459459471772376, 2.101351349561254, -2.783783784420419]\n",
      "[-2.941700300327496, 3.2429002412191523, -0.4603000521471847]\n",
      "1.864936218554223\n"
     ]
    }
   ],
   "source": [
    "x1, x2, distance = distance_between_polyhedra(A1, b1, A2, b2)\n",
    "print(x1)\n",
    "print(x2)\n",
    "print(distance)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
